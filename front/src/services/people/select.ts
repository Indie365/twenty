import { QueryResult, gql, useQuery } from '@apollo/client';
import { GraphqlQueryPerson } from '../../interfaces/person.interface';

type OrderByIds = string; //TODO should be an enum generated by codeGen

export type OrderBy = Record<OrderByIds, 'asc' | 'desc'>;

export const reduceSortsToOrderBy = (
  sorts: Array<{ id: OrderByIds; order: 'asc' | 'desc' }>,
): OrderBy[] => {
  const mappedSorts = sorts.reduce((acc, sort) => {
    acc[sort.id] = sort.order;
    return acc;
  }, {} as OrderBy);
  return [mappedSorts];
};

export const GET_PEOPLE = gql`
  query GetPeople($orderBy: [people_order_by!]) {
    people(order_by: $orderBy) {
      id
      phone
      email
      city
      firstname
      lastname
      created_at
      company {
        id
        company_name
        company_domain
      }
    }
  }
`;

export function usePeopleQuery(
  orderBy: OrderBy[],
): QueryResult<{ people: GraphqlQueryPerson[] }> {
  return useQuery<{ people: GraphqlQueryPerson[] }>(GET_PEOPLE, {
    variables: { orderBy },
  });
}
