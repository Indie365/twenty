# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActivityTarget {
  id: ID!
  activityId: String!
  personId: String
  companyId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  activity: Activity!
  person: Person
  company: Company
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: ID!
  body: String!
  authorId: String!
  workspaceMemberAuthorId: String
  activityId: String
  commentThreadId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  workspaceMemberAuthor: WorkspaceMember
  activity: Activity
}

type Attachment {
  id: ID!
  fullPath: String!
  type: AttachmentType!
  name: String!
  authorId: String!
  workspaceMemberAuthorId: String
  activityId: String
  personId: String
  companyId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  workspaceMemberAuthor: WorkspaceMember
  activity: Activity
  person: Person
  company: Company
  workspace: Workspace!
}

enum AttachmentType {
  Image
  Audio
  Video
  TextDocument
  Spreadsheet
  Archive
  Other
}

type Activity {
  id: ID!
  body: String
  title: String
  type: ActivityType!
  reminderAt: DateTime
  dueAt: DateTime
  completedAt: DateTime
  authorId: String!
  workspaceMemberAuthorId: String
  assigneeId: String
  workspaceMemberAssigneeId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  activityTargets: [ActivityTarget!]
  comments: [Comment!]
  attachments: [Attachment!]
  author: User!
  workspaceMemberAuthor: WorkspaceMember
  assignee: User
  workspaceMemberAssignee: WorkspaceMember
}

enum ActivityType {
  Note
  Task
}

type ViewFilter {
  displayValue: String!
  key: String!
  name: String!
  operand: ViewFilterOperand!
  value: String!
  viewId: String!
  view: View!
}

enum ViewFilterOperand {
  Contains
  DoesNotContain
  GreaterThan
  LessThan
  Is
  IsNot
  IsNotNull
}

type ViewSort {
  direction: ViewSortDirection!
  key: String!
  name: String!
  viewId: String!
  view: View!
}

enum ViewSortDirection {
  asc
  desc
}

type View {
  id: ID!
  name: String!
  objectId: String!
  type: ViewType!
  fields: [ViewField!]
  filters: [ViewFilter!]
  sorts: [ViewSort!]
}

enum ViewType {
  Table
  Pipeline
}

type ViewField {
  index: Float!
  isVisible: Boolean!
  key: String!
  name: String!
  objectId: String!
  size: Int
  viewId: String!
  view: View!
}

type Workspace {
  id: ID!
  domainName: String
  displayName: String
  logo: String
  inviteHash: String
  createdAt: DateTime!
  updatedAt: DateTime!
  workspaceMember: [WorkspaceMember!]
  companies: [Company!]
  people: [Person!]
  activities: [Activity!]
  comments: [Comment!]
  pipelines: [Pipeline!]
  pipelineStages: [PipelineStage!]
  pipelineProgresses: [PipelineProgress!]
  activityTargets: [ActivityTarget!]
  viewFields: [ViewField!]
  viewFilters: [ViewFilter!]
  views: [View!]
  viewSorts: [ViewSort!]
  Attachment: [Attachment!]
}

type Favorite {
  id: ID!
  workspaceId: String
  personId: String
  companyId: String
  workspaceMemberId: String
  person: Person
  company: Company
  workspaceMember: WorkspaceMember
}

type UserSettings {
  id: ID!
  colorScheme: ColorScheme!
  locale: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  WorkspaceMember: [WorkspaceMember!]
}

enum ColorScheme {
  Light
  Dark
  System
}

type WorkspaceMember {
  id: ID!
  allowImpersonation: Boolean!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  settingsId: String
  user: User!
  workspace: Workspace!
  Favorite: [Favorite!]
  authoredActivities: [Activity!]
  assignedActivities: [Activity!]
  authoredAttachments: [Attachment!]
  settings: UserSettings
  companies: [Company!]
  comments: [Comment!]
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  emailVerified: Boolean!
  avatarUrl: String
  locale: String!
  phoneNumber: String
  lastSeen: DateTime
  disabled: Boolean!
  metadata: JSON
  canImpersonate: Boolean!
  settingsId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  workspaceMember: WorkspaceMember
  companies: [Company!]
  comments: [Comment!]
  authoredActivities: [Activity!]
  assignedActivities: [Activity!]
  authoredAttachments: [Attachment!]
  settings: UserSettings!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Company {
  id: ID!
  name: String!
  domainName: String!
  linkedinUrl: String
  annualRecurringRevenue: Int
  idealCustomerProfile: Boolean!
  xUrl: String
  address: String!
  employees: Int
  accountOwnerId: String
  workspaceMemberAccountOwnerId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  people: [Person!]
  accountOwner: User
  workspaceMemberAccountOwner: WorkspaceMember
  ActivityTarget: [ActivityTarget!]
  PipelineProgress: [PipelineProgress!]
  Favorite: [Favorite!]
  Attachment: [Attachment!]
  activities: [Activity!]!
  comments: [Comment!]!
  _activityCount: Int!
}

type Person {
  id: ID!
  firstName: String
  lastName: String
  email: String
  linkedinUrl: String
  xUrl: String
  jobTitle: String
  phone: String
  city: String
  avatarUrl: String
  companyId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  company: Company
  contactPipelineProgresses: [PipelineProgress!]
  ActivityTarget: [ActivityTarget!]
  PipelineProgress: [PipelineProgress!]
  Favorite: [Favorite!]
  Attachment: [Attachment!]
}

type PipelineProgress {
  id: ID!
  amount: Int
  closeDate: DateTime
  probability: Int
  pipelineId: String!
  pipelineStageId: String!
  pointOfContactId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  companyId: String
  personId: String
  pipeline: Pipeline!
  pipelineStage: PipelineStage!
  pointOfContact: Person
  company: Company
  person: Person
}

type PipelineStage {
  id: ID!
  name: String!
  type: String!
  color: String!
  index: Int
  pipelineId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  pipelineProgresses: [PipelineProgress!]

  """"""
  pipeline: Pipeline!
}

type Pipeline {
  id: ID!
  name: String!
  icon: String!
  pipelineProgressableType: PipelineProgressableType!
  createdAt: DateTime!
  updatedAt: DateTime!
  currency: Currency!
  pipelineStages: [PipelineStage!]
  pipelineProgresses: [PipelineProgress!]
}

enum PipelineProgressableType {
  Person
  Company
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDD
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STD
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMM
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VES
  VND
  VUV
  WST
  XAF
  XCD
  XOF
  XPF
  XSU
  XUA
  YER
  ZAR
  ZMW
  ZWL
}

type AffectedRows {
  count: Int!
}

type AuthToken {
  token: String!
  expiresAt: DateTime!
}

type AuthTokenPair {
  accessToken: AuthToken!
  refreshToken: AuthToken!
}

type AuthProviders {
  google: Boolean!
  magicLink: Boolean!
  password: Boolean!
}

type Telemetry {
  enabled: Boolean!
  anonymizationEnabled: Boolean!
}

type Support {
  supportDriver: String!
  supportFrontChatId: String
}

type field {
  id: ID!
  type: String!
  displayName: String!
  description: String
  icon: String
  placeholder: String
  isCustom: Boolean!
  isActive: Boolean!
  isNullable: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type object {
  id: ID!
  displayName: String!
  displayNameSingular: String
  displayNamePlural: String
  description: String
  icon: String
  isCustom: Boolean!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  fields(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}
  ): ObjectFieldsConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type objectEdge {
  """The node containing the object"""
  node: object!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type ObjectConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [objectEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type fieldEdge {
  """The node containing the field"""
  node: field!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ObjectFieldsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [fieldEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FieldConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [fieldEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Query {
  findManyCompany(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!]): [Company!]!
  findUniqueCompany(where: CompanyWhereUniqueInput!): Company!
  findManyActivities(where: ActivityWhereInput, orderBy: [ActivityOrderByWithRelationInput!], cursor: ActivityWhereUniqueInput, take: Int, skip: Int, distinct: [ActivityScalarFieldEnum!]): [Activity!]!
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: StringFilter
  name: StringFilter
  domainName: StringFilter
  linkedinUrl: StringNullableFilter
  annualRecurringRevenue: IntNullableFilter
  idealCustomerProfile: BoolFilter
  xUrl: StringNullableFilter
  address: StringFilter
  employees: IntNullableFilter
  accountOwnerId: StringNullableFilter
  workspaceMemberAccountOwnerId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  people: PersonListRelationFilter
  accountOwner: UserRelationFilter
  workspaceMemberAccountOwner: WorkspaceMemberRelationFilter
  ActivityTarget: ActivityTargetListRelationFilter
  PipelineProgress: PipelineProgressListRelationFilter
  Favorite: FavoriteListRelationFilter
  Attachment: AttachmentListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input PersonListRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: StringFilter
  firstName: StringNullableFilter
  lastName: StringNullableFilter
  email: StringNullableFilter
  linkedinUrl: StringNullableFilter
  xUrl: StringNullableFilter
  jobTitle: StringNullableFilter
  phone: StringNullableFilter
  city: StringNullableFilter
  avatarUrl: StringNullableFilter
  companyId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  company: CompanyRelationFilter
  contactPipelineProgresses: PipelineProgressListRelationFilter
  ActivityTarget: ActivityTargetListRelationFilter
  PipelineProgress: PipelineProgressListRelationFilter
  Favorite: FavoriteListRelationFilter
  Attachment: AttachmentListRelationFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input PipelineProgressListRelationFilter {
  every: PipelineProgressWhereInput
  some: PipelineProgressWhereInput
  none: PipelineProgressWhereInput
}

input PipelineProgressWhereInput {
  AND: [PipelineProgressWhereInput!]
  OR: [PipelineProgressWhereInput!]
  NOT: [PipelineProgressWhereInput!]
  id: StringFilter
  amount: IntNullableFilter
  closeDate: DateTimeNullableFilter
  probability: IntNullableFilter
  pipelineId: StringFilter
  pipelineStageId: StringFilter
  pointOfContactId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  companyId: StringNullableFilter
  personId: StringNullableFilter
  pipeline: PipelineRelationFilter
  pipelineStage: PipelineStageRelationFilter
  pointOfContact: PersonRelationFilter
  company: CompanyRelationFilter
  person: PersonRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input PipelineRelationFilter {
  is: PipelineWhereInput
  isNot: PipelineWhereInput
}

input PipelineWhereInput {
  AND: [PipelineWhereInput!]
  OR: [PipelineWhereInput!]
  NOT: [PipelineWhereInput!]
  id: StringFilter
  name: StringFilter
  icon: StringFilter
  pipelineProgressableType: EnumPipelineProgressableTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  currency: EnumCurrencyFilter
  pipelineStages: PipelineStageListRelationFilter
  pipelineProgresses: PipelineProgressListRelationFilter
}

input EnumPipelineProgressableTypeFilter {
  equals: PipelineProgressableType
  in: [PipelineProgressableType!]
  notIn: [PipelineProgressableType!]
  not: NestedEnumPipelineProgressableTypeFilter
}

input NestedEnumPipelineProgressableTypeFilter {
  equals: PipelineProgressableType
  in: [PipelineProgressableType!]
  notIn: [PipelineProgressableType!]
  not: NestedEnumPipelineProgressableTypeFilter
}

input EnumCurrencyFilter {
  equals: Currency
  in: [Currency!]
  notIn: [Currency!]
  not: NestedEnumCurrencyFilter
}

input NestedEnumCurrencyFilter {
  equals: Currency
  in: [Currency!]
  notIn: [Currency!]
  not: NestedEnumCurrencyFilter
}

input PipelineStageListRelationFilter {
  every: PipelineStageWhereInput
  some: PipelineStageWhereInput
  none: PipelineStageWhereInput
}

input PipelineStageWhereInput {
  AND: [PipelineStageWhereInput!]
  OR: [PipelineStageWhereInput!]
  NOT: [PipelineStageWhereInput!]
  id: StringFilter
  name: StringFilter
  type: StringFilter
  color: StringFilter
  index: IntNullableFilter
  pipelineId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  pipelineProgresses: PipelineProgressListRelationFilter
  pipeline: PipelineRelationFilter
}

input PipelineStageRelationFilter {
  is: PipelineStageWhereInput
  isNot: PipelineStageWhereInput
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input ActivityTargetListRelationFilter {
  every: ActivityTargetWhereInput
  some: ActivityTargetWhereInput
  none: ActivityTargetWhereInput
}

input ActivityTargetWhereInput {
  AND: [ActivityTargetWhereInput!]
  OR: [ActivityTargetWhereInput!]
  NOT: [ActivityTargetWhereInput!]
  id: StringFilter
  activityId: StringFilter
  personId: StringNullableFilter
  companyId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  activity: ActivityRelationFilter
  person: PersonRelationFilter
  company: CompanyRelationFilter
}

input ActivityRelationFilter {
  is: ActivityWhereInput
  isNot: ActivityWhereInput
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: StringFilter
  body: StringNullableFilter
  title: StringNullableFilter
  type: EnumActivityTypeFilter
  reminderAt: DateTimeNullableFilter
  dueAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  authorId: StringFilter
  workspaceMemberAuthorId: StringNullableFilter
  assigneeId: StringNullableFilter
  workspaceMemberAssigneeId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  activityTargets: ActivityTargetListRelationFilter
  comments: CommentListRelationFilter
  attachments: AttachmentListRelationFilter
  author: UserRelationFilter
  workspaceMemberAuthor: WorkspaceMemberRelationFilter
  assignee: UserRelationFilter
  workspaceMemberAssignee: WorkspaceMemberRelationFilter
}

input EnumActivityTypeFilter {
  equals: ActivityType
  in: [ActivityType!]
  notIn: [ActivityType!]
  not: NestedEnumActivityTypeFilter
}

input NestedEnumActivityTypeFilter {
  equals: ActivityType
  in: [ActivityType!]
  notIn: [ActivityType!]
  not: NestedEnumActivityTypeFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  body: StringFilter
  authorId: StringFilter
  workspaceMemberAuthorId: StringNullableFilter
  activityId: StringNullableFilter
  commentThreadId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  author: UserRelationFilter
  workspaceMemberAuthor: WorkspaceMemberRelationFilter
  activity: ActivityRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringNullableFilter
  lastName: StringNullableFilter
  email: StringFilter
  emailVerified: BoolFilter
  avatarUrl: StringNullableFilter
  locale: StringFilter
  phoneNumber: StringNullableFilter
  lastSeen: DateTimeNullableFilter
  disabled: BoolFilter
  metadata: JsonNullableFilter
  canImpersonate: BoolFilter
  settingsId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  companies: CompanyListRelationFilter
  comments: CommentListRelationFilter
  authoredActivities: ActivityListRelationFilter
  assignedActivities: ActivityListRelationFilter
  authoredAttachments: AttachmentListRelationFilter
  settings: UserSettingsRelationFilter
}

input JsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input ActivityListRelationFilter {
  every: ActivityWhereInput
  some: ActivityWhereInput
  none: ActivityWhereInput
}

input AttachmentListRelationFilter {
  every: AttachmentWhereInput
  some: AttachmentWhereInput
  none: AttachmentWhereInput
}

input AttachmentWhereInput {
  AND: [AttachmentWhereInput!]
  OR: [AttachmentWhereInput!]
  NOT: [AttachmentWhereInput!]
  id: StringFilter
  fullPath: StringFilter
  type: EnumAttachmentTypeFilter
  name: StringFilter
  authorId: StringFilter
  workspaceMemberAuthorId: StringNullableFilter
  activityId: StringNullableFilter
  personId: StringNullableFilter
  companyId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  author: UserRelationFilter
  workspaceMemberAuthor: WorkspaceMemberRelationFilter
  activity: ActivityRelationFilter
}

input EnumAttachmentTypeFilter {
  equals: AttachmentType
  in: [AttachmentType!]
  notIn: [AttachmentType!]
  not: NestedEnumAttachmentTypeFilter
}

input NestedEnumAttachmentTypeFilter {
  equals: AttachmentType
  in: [AttachmentType!]
  notIn: [AttachmentType!]
  not: NestedEnumAttachmentTypeFilter
}

input WorkspaceMemberRelationFilter {
  is: WorkspaceMemberWhereInput
  isNot: WorkspaceMemberWhereInput
}

input WorkspaceMemberWhereInput {
  AND: [WorkspaceMemberWhereInput!]
  OR: [WorkspaceMemberWhereInput!]
  NOT: [WorkspaceMemberWhereInput!]
  id: StringFilter
  allowImpersonation: BoolFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  settingsId: StringNullableFilter
  user: UserRelationFilter
  Favorite: FavoriteListRelationFilter
  authoredActivities: ActivityListRelationFilter
  assignedActivities: ActivityListRelationFilter
  authoredAttachments: AttachmentListRelationFilter
  settings: UserSettingsRelationFilter
  companies: CompanyListRelationFilter
  comments: CommentListRelationFilter
}

input FavoriteListRelationFilter {
  every: FavoriteWhereInput
  some: FavoriteWhereInput
  none: FavoriteWhereInput
}

input FavoriteWhereInput {
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
  id: StringFilter
  workspaceId: StringNullableFilter
  personId: StringNullableFilter
  companyId: StringNullableFilter
  workspaceMemberId: StringNullableFilter
}

input UserSettingsRelationFilter {
  is: UserSettingsWhereInput
  isNot: UserSettingsWhereInput
}

input UserSettingsWhereInput {
  AND: [UserSettingsWhereInput!]
  OR: [UserSettingsWhereInput!]
  NOT: [UserSettingsWhereInput!]
  id: StringFilter
  colorScheme: EnumColorSchemeFilter
  locale: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  WorkspaceMember: WorkspaceMemberListRelationFilter
}

input EnumColorSchemeFilter {
  equals: ColorScheme
  in: [ColorScheme!]
  notIn: [ColorScheme!]
  not: NestedEnumColorSchemeFilter
}

input NestedEnumColorSchemeFilter {
  equals: ColorScheme
  in: [ColorScheme!]
  notIn: [ColorScheme!]
  not: NestedEnumColorSchemeFilter
}

input WorkspaceMemberListRelationFilter {
  every: WorkspaceMemberWhereInput
  some: WorkspaceMemberWhereInput
  none: WorkspaceMemberWhereInput
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  domainName: SortOrder
  linkedinUrl: SortOrder
  annualRecurringRevenue: SortOrder
  idealCustomerProfile: SortOrder
  xUrl: SortOrder
  address: SortOrder
  employees: SortOrder
  accountOwnerId: SortOrder
  workspaceMemberAccountOwnerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  people: PersonOrderByRelationAggregateInput
  accountOwner: UserOrderByWithRelationInput
  workspaceMemberAccountOwner: WorkspaceMemberOrderByWithRelationInput
  ActivityTarget: ActivityTargetOrderByRelationAggregateInput
  PipelineProgress: PipelineProgressOrderByRelationAggregateInput
  Favorite: FavoriteOrderByRelationAggregateInput
  Attachment: AttachmentOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input PersonOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  avatarUrl: SortOrder
  locale: SortOrder
  phoneNumber: SortOrder
  lastSeen: SortOrder
  disabled: SortOrder
  metadata: SortOrder
  canImpersonate: SortOrder
  settingsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companies: CompanyOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  authoredActivities: ActivityOrderByRelationAggregateInput
  assignedActivities: ActivityOrderByRelationAggregateInput
  authoredAttachments: AttachmentOrderByRelationAggregateInput
  settings: UserSettingsOrderByWithRelationInput
}

input CompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActivityOrderByRelationAggregateInput {
  _count: SortOrder
}

input AttachmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserSettingsOrderByWithRelationInput {
  id: SortOrder
  colorScheme: SortOrder
  locale: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  WorkspaceMember: WorkspaceMemberOrderByRelationAggregateInput
}

input WorkspaceMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkspaceMemberOrderByWithRelationInput {
  id: SortOrder
  allowImpersonation: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  settingsId: SortOrder
  user: UserOrderByWithRelationInput
  Favorite: FavoriteOrderByRelationAggregateInput
  authoredActivities: ActivityOrderByRelationAggregateInput
  assignedActivities: ActivityOrderByRelationAggregateInput
  authoredAttachments: AttachmentOrderByRelationAggregateInput
  settings: UserSettingsOrderByWithRelationInput
  companies: CompanyOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
}

input FavoriteOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActivityTargetOrderByRelationAggregateInput {
  _count: SortOrder
}

input PipelineProgressOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyWhereUniqueInput {
  id: String
}

enum CompanyScalarFieldEnum {
  id
  name
  domainName
  linkedinUrl
  annualRecurringRevenue
  idealCustomerProfile
  xUrl
  address
  employees
  accountOwnerId
  workspaceMemberAccountOwnerId
  workspaceId
  deletedAt
  createdAt
  updatedAt
}

input ActivityOrderByWithRelationInput {
  id: SortOrder
  body: SortOrder
  title: SortOrder
  type: SortOrder
  reminderAt: SortOrder
  dueAt: SortOrder
  completedAt: SortOrder
  authorId: SortOrder
  workspaceMemberAuthorId: SortOrder
  assigneeId: SortOrder
  workspaceMemberAssigneeId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  activityTargets: ActivityTargetOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  attachments: AttachmentOrderByRelationAggregateInput
  author: UserOrderByWithRelationInput
  workspaceMemberAuthor: WorkspaceMemberOrderByWithRelationInput
  assignee: UserOrderByWithRelationInput
  workspaceMemberAssignee: WorkspaceMemberOrderByWithRelationInput
}

input ActivityWhereUniqueInput {
  id: String
}

enum ActivityScalarFieldEnum {
  id
  body
  title
  type
  reminderAt
  dueAt
  completedAt
  authorId
  workspaceMemberAuthorId
  assigneeId
  workspaceMemberAssigneeId
  workspaceId
  deletedAt
  createdAt
  updatedAt
}

type Mutation {
  updateOneCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  deleteManyCompany(where: CompanyWhereInput): AffectedRows!
  createOneCompany(data: CompanyCreateInput!): Company!
  createManyCompany(data: [CompanyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows!
  createOneActivity(data: ActivityCreateInput!): Activity!
  updateOneActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity!
  deleteManyActivities(where: ActivityWhereInput): AffectedRows!
  createOneComment(data: CommentCreateInput!): Comment!
}

input CompanyUpdateInput {
  id: String
  name: String
  domainName: String
  linkedinUrl: String
  annualRecurringRevenue: Int
  idealCustomerProfile: Boolean
  xUrl: String
  address: String
  employees: Int
  createdAt: DateTime
  updatedAt: DateTime
  people: PersonUpdateManyWithoutCompanyNestedInput
  accountOwner: UserUpdateOneWithoutCompaniesNestedInput
  workspaceMemberAccountOwner: WorkspaceMemberUpdateOneWithoutCompaniesNestedInput
  ActivityTarget: ActivityTargetUpdateManyWithoutCompanyNestedInput
  PipelineProgress: PipelineProgressUpdateManyWithoutCompanyNestedInput
  Favorite: FavoriteUpdateManyWithoutCompanyNestedInput
  Attachment: AttachmentUpdateManyWithoutCompanyNestedInput
}

input PersonUpdateManyWithoutCompanyNestedInput {
  set: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonWhereUniqueInput {
  id: String
}

input UserUpdateOneWithoutCompaniesNestedInput {
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserWhereUniqueInput {
  id: String
  email: String
  settingsId: String
}

input WorkspaceMemberUpdateOneWithoutCompaniesNestedInput {
  disconnect: Boolean
  connect: WorkspaceMemberWhereUniqueInput
}

input WorkspaceMemberWhereUniqueInput {
  id: String
  userId: String
}

input ActivityTargetUpdateManyWithoutCompanyNestedInput {
  create: [ActivityTargetCreateWithoutCompanyInput!]
  connectOrCreate: [ActivityTargetCreateOrConnectWithoutCompanyInput!]
  createMany: ActivityTargetCreateManyCompanyInputEnvelope
  set: [ActivityTargetWhereUniqueInput!]
  disconnect: [ActivityTargetWhereUniqueInput!]
  delete: [ActivityTargetWhereUniqueInput!]
  connect: [ActivityTargetWhereUniqueInput!]
  deleteMany: [ActivityTargetScalarWhereInput!]
}

input ActivityTargetCreateWithoutCompanyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  activity: ActivityCreateNestedOneWithoutActivityTargetsInput!
  person: PersonCreateNestedOneWithoutActivityTargetInput
}

input ActivityCreateNestedOneWithoutActivityTargetsInput {
  connect: ActivityWhereUniqueInput
}

input PersonCreateNestedOneWithoutActivityTargetInput {
  connect: PersonWhereUniqueInput
}

input ActivityTargetCreateOrConnectWithoutCompanyInput {
  where: ActivityTargetWhereUniqueInput!
  create: ActivityTargetCreateWithoutCompanyInput!
}

input ActivityTargetWhereUniqueInput {
  id: String
}

input ActivityTargetCreateManyCompanyInputEnvelope {
  data: [ActivityTargetCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ActivityTargetCreateManyCompanyInput {
  id: String
  activityId: String!
  personId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ActivityTargetScalarWhereInput {
  AND: [ActivityTargetScalarWhereInput!]
  OR: [ActivityTargetScalarWhereInput!]
  NOT: [ActivityTargetScalarWhereInput!]
  id: StringFilter
  activityId: StringFilter
  personId: StringNullableFilter
  companyId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PipelineProgressUpdateManyWithoutCompanyNestedInput {
  set: [PipelineProgressWhereUniqueInput!]
  disconnect: [PipelineProgressWhereUniqueInput!]
  connect: [PipelineProgressWhereUniqueInput!]
}

input PipelineProgressWhereUniqueInput {
  id: String
}

input FavoriteUpdateManyWithoutCompanyNestedInput {
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteWhereUniqueInput {
  id: String
}

input AttachmentUpdateManyWithoutCompanyNestedInput {
  set: [AttachmentWhereUniqueInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input AttachmentWhereUniqueInput {
  id: String
}

input CompanyCreateInput {
  id: String
  name: String!
  domainName: String!
  linkedinUrl: String
  annualRecurringRevenue: Int
  idealCustomerProfile: Boolean
  xUrl: String
  address: String!
  employees: Int
  createdAt: DateTime
  updatedAt: DateTime
  people: PersonCreateNestedManyWithoutCompanyInput
  accountOwner: UserCreateNestedOneWithoutCompaniesInput
  workspaceMemberAccountOwner: WorkspaceMemberCreateNestedOneWithoutCompaniesInput
  ActivityTarget: ActivityTargetCreateNestedManyWithoutCompanyInput
  PipelineProgress: PipelineProgressCreateNestedManyWithoutCompanyInput
  Favorite: FavoriteCreateNestedManyWithoutCompanyInput
  Attachment: AttachmentCreateNestedManyWithoutCompanyInput
}

input PersonCreateNestedManyWithoutCompanyInput {
  connect: [PersonWhereUniqueInput!]
}

input UserCreateNestedOneWithoutCompaniesInput {
  connect: UserWhereUniqueInput
}

input WorkspaceMemberCreateNestedOneWithoutCompaniesInput {
  connect: WorkspaceMemberWhereUniqueInput
}

input ActivityTargetCreateNestedManyWithoutCompanyInput {
  create: [ActivityTargetCreateWithoutCompanyInput!]
  connectOrCreate: [ActivityTargetCreateOrConnectWithoutCompanyInput!]
  createMany: ActivityTargetCreateManyCompanyInputEnvelope
  connect: [ActivityTargetWhereUniqueInput!]
}

input PipelineProgressCreateNestedManyWithoutCompanyInput {
  connect: [PipelineProgressWhereUniqueInput!]
}

input FavoriteCreateNestedManyWithoutCompanyInput {
  connect: [FavoriteWhereUniqueInput!]
}

input AttachmentCreateNestedManyWithoutCompanyInput {
  connect: [AttachmentWhereUniqueInput!]
}

input CompanyCreateManyInput {
  id: String
  name: String!
  domainName: String!
  linkedinUrl: String
  annualRecurringRevenue: Int
  idealCustomerProfile: Boolean
  xUrl: String
  address: String!
  employees: Int
  accountOwnerId: String
  workspaceMemberAccountOwnerId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ActivityCreateInput {
  id: String
  body: String
  title: String
  type: ActivityType
  reminderAt: DateTime
  dueAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  activityTargets: ActivityTargetCreateNestedManyWithoutActivityInput
  comments: CommentCreateNestedManyWithoutActivityInput
  attachments: AttachmentCreateNestedManyWithoutActivityInput
  author: UserCreateNestedOneWithoutAuthoredActivitiesInput!
  workspaceMemberAuthor: WorkspaceMemberCreateNestedOneWithoutAuthoredActivitiesInput
  assignee: UserCreateNestedOneWithoutAssignedActivitiesInput
  workspaceMemberAssignee: WorkspaceMemberCreateNestedOneWithoutAssignedActivitiesInput
}

input ActivityTargetCreateNestedManyWithoutActivityInput {
  create: [ActivityTargetCreateWithoutActivityInput!]
  connectOrCreate: [ActivityTargetCreateOrConnectWithoutActivityInput!]
  createMany: ActivityTargetCreateManyActivityInputEnvelope
  connect: [ActivityTargetWhereUniqueInput!]
}

input ActivityTargetCreateWithoutActivityInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  person: PersonCreateNestedOneWithoutActivityTargetInput
  company: CompanyCreateNestedOneWithoutActivityTargetInput
}

input CompanyCreateNestedOneWithoutActivityTargetInput {
  connect: CompanyWhereUniqueInput
}

input ActivityTargetCreateOrConnectWithoutActivityInput {
  where: ActivityTargetWhereUniqueInput!
  create: ActivityTargetCreateWithoutActivityInput!
}

input ActivityTargetCreateManyActivityInputEnvelope {
  data: [ActivityTargetCreateManyActivityInput!]!
  skipDuplicates: Boolean
}

input ActivityTargetCreateManyActivityInput {
  id: String
  personId: String
  companyId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentCreateNestedManyWithoutActivityInput {
  connect: [CommentWhereUniqueInput!]
}

input CommentWhereUniqueInput {
  id: String
}

input AttachmentCreateNestedManyWithoutActivityInput {
  connect: [AttachmentWhereUniqueInput!]
}

input UserCreateNestedOneWithoutAuthoredActivitiesInput {
  connect: UserWhereUniqueInput
}

input WorkspaceMemberCreateNestedOneWithoutAuthoredActivitiesInput {
  connect: WorkspaceMemberWhereUniqueInput
}

input UserCreateNestedOneWithoutAssignedActivitiesInput {
  connect: UserWhereUniqueInput
}

input WorkspaceMemberCreateNestedOneWithoutAssignedActivitiesInput {
  connect: WorkspaceMemberWhereUniqueInput
}

input ActivityUpdateInput {
  id: String
  body: String
  title: String
  type: ActivityType
  reminderAt: DateTime
  dueAt: DateTime
  completedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  activityTargets: ActivityTargetUpdateManyWithoutActivityNestedInput
  comments: CommentUpdateManyWithoutActivityNestedInput
  attachments: AttachmentUpdateManyWithoutActivityNestedInput
  author: UserUpdateOneRequiredWithoutAuthoredActivitiesNestedInput
  workspaceMemberAuthor: WorkspaceMemberUpdateOneWithoutAuthoredActivitiesNestedInput
  assignee: UserUpdateOneWithoutAssignedActivitiesNestedInput
  workspaceMemberAssignee: WorkspaceMemberUpdateOneWithoutAssignedActivitiesNestedInput
}

input ActivityTargetUpdateManyWithoutActivityNestedInput {
  create: [ActivityTargetCreateWithoutActivityInput!]
  connectOrCreate: [ActivityTargetCreateOrConnectWithoutActivityInput!]
  createMany: ActivityTargetCreateManyActivityInputEnvelope
  set: [ActivityTargetWhereUniqueInput!]
  disconnect: [ActivityTargetWhereUniqueInput!]
  delete: [ActivityTargetWhereUniqueInput!]
  connect: [ActivityTargetWhereUniqueInput!]
  deleteMany: [ActivityTargetScalarWhereInput!]
}

input CommentUpdateManyWithoutActivityNestedInput {
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
}

input AttachmentUpdateManyWithoutActivityNestedInput {
  set: [AttachmentWhereUniqueInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input UserUpdateOneRequiredWithoutAuthoredActivitiesNestedInput {
  connect: UserWhereUniqueInput
}

input WorkspaceMemberUpdateOneWithoutAuthoredActivitiesNestedInput {
  disconnect: Boolean
  connect: WorkspaceMemberWhereUniqueInput
}

input UserUpdateOneWithoutAssignedActivitiesNestedInput {
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input WorkspaceMemberUpdateOneWithoutAssignedActivitiesNestedInput {
  disconnect: Boolean
  connect: WorkspaceMemberWhereUniqueInput
}

input CommentCreateInput {
  id: String
  body: String!
  commentThreadId: String
  createdAt: DateTime
  updatedAt: DateTime
  author: UserCreateNestedOneWithoutCommentsInput!
  workspaceMemberAuthor: WorkspaceMemberCreateNestedOneWithoutCommentsInput
  activity: ActivityCreateNestedOneWithoutCommentsInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
}

input WorkspaceMemberCreateNestedOneWithoutCommentsInput {
  connect: WorkspaceMemberWhereUniqueInput
}

input ActivityCreateNestedOneWithoutCommentsInput {
  connect: ActivityWhereUniqueInput
}